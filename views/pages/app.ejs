<!DOCTYPE html>
<html lang="fr" dir="ltr" class="app">
    <head>
		<meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <meta http-equiv="X-UA-Compatible" content="ie=edge">
	    <link rel="stylesheet" href="../mincss/styles.css">
	    <title>WeMake - App</title>
    </head>
    <body>
        <header class="container-fluid app-header">
            <div class="row align-center">
                <div class="col-lg-6">
                    <nav class="menu">
                        <a href="#" class="menu__icon"><img src="../images/menu.svg" alt="Menu"></a>
                        <ul class="menu__sub">
                            <li class="menu__sub__link"><a href="/mes-projets" title="Mes projets">Mes projets</a></li>
                            <li class="menu__sub__link"><a href="/mes-collaborations" title="Mes collaborations">Mes collaborations</a></li>
                            <li class="menu__sub__link"><a href="/galerie" title="Galerie publique">Galerie publique</a></li>
                            <li class="menu__sub__link"><a href="/deconnexion" title="Déconnexion">Déconnexion</a></li>
                        </ul>
                    </nav>
                </div>
                <h1 class="project-name text-center"><%= infos[0].title %></h1>
                <div class="col-lg-6 d-flex justify-end">
                    <div class="people d-flex align-center">
                        <img class="people__icon" src="../images/add-people.svg" alt="">
                        <span class="people__number"><%= count %></span>
                        <a href="#" class="people__add">
                            <img src="../images/add.svg" alt="Add people" title="Add">
                        </a>
                        <form action="/add-user/<%= infos[0].id %>" method="POST" class="people__sub">
                            <input class="people__sub__input" id="collabInput" type="email" name="email" placeholder="Saisissez l'email du collaborateur">
                            <button type="submit" id="collabButton" class="people__sub__validate button button--blue" type="submit">Inviter</button>
                        </form>
                    </div>
                    <a href="#" id="export" class="export button button--purple" title="Exporter">Exporter</a>
                </div>
            </div>
        </header>
        <div class="popup">
            <div class="popup__close">&#215;</div>
            <div class="popup__text">
                Lorem ipsum dola ersam Lorem ipsum dola ersam
            </div>
        </div>
        <div class="popup">
            <div class="popup__close">&#215;</div>
            <div class="popup__text">
                Lorem ipsum dola ersam Lorem ipsum dola ersam
            </div>
            <a id="popup-link" href="">
                <button class="popup__button button button&#45;&#45;white">Rejoindre</button>
            </a>
        </div>
        <section class="characteristics" id="caract">
            <div class="characteristics__close" id="caract-close">&#8249;</div>
            <h3 class="characteristics__title">Caractéristiques</h3>
            <div class="characteristics__option">
                <span class="characteristics__option__title">Position</span>
                <ul>
                    <li class="characteristics__option__action" id="posAp">
                        Mettre en arrière plan
                    </li>
                    <li class="characteristics__option__action" id="posAr">
                        Mettre en arrière
                    </li>
                    <li class="characteristics__option__action" id="posPp">
                        Mettre en premier plan
                    </li>
                    <li class="characteristics__option__action" id="posAv">
                        Mettre en avant
                    </li>
                </ul>
            </div>
            <div class="characteristics__option" id="backgroundOptions">
                <span class="characteristics__option__title">Couleur fond</span>
                <ul class="background-color">
                    <li class="characteristics__option__action characteristics__option__action--color">
                        <input type="color" name="" value="#278bff" id="colorPickerSingle">
                    </li>
                    <li class="characteristics__option__action characteristics__option__action--color">
                        <img src="../images/transparent.svg" alt="Transparent" id="colorPickerNone">
                    </li>
                </ul>
            </div>
            <div class="characteristics__option" id="borderOptions">
                <span class="characteristics__option__title">Couleur bordure</span>
                <ul>
                    <li class="characteristics__option__action characteristics__option__action--color">
                        <input type="color" name="" value="#278bff" id="colorPickerBorder">
                    </li>
                </ul>
            </div>
            <div class="characteristics__option" id="widthOptions">
                <span class="characteristics__option__title">Épaisseur bordure</span>
                <ul>
                    <li class="characteristics__option__action characteristics__option__action--color">
                      <span id='widthCounter'>0</span>
                      <input type="range" id="borderWidth" min="0" max="100">
                    </li>
                </ul>
            </div>
            <div class="characteristics__option" id="fontOptions">
                <span class="characteristics__option__title">Police</span> <br>
                <select id="fonts">
                    <option class="characteristics__option__action characteristics__option__action--color" value="Montserrat">Montserrat</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="OpenSans">OpenSans</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="Lato">Lato</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="PlayfairDisplay">PlayfairDisplay</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="Oswald">Oswald</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="Poppins">Poppins</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="Raleway">Raleway</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="Roboto">Roboto</option>
                    <option class="characteristics__option__action characteristics__option__action--color" value="RobotoSlab">RobotoSlab</option>
                </select>
            </div>
            <div class="characteristics__option" id="backgroundFreeOptions" style="display: none">
                <span class="characteristics__option__title">Couleur du trait</span>
                <ul class="background-color">
                    <li class="characteristics__option__action characteristics__option__action--color">
                        <input type="color" name="" value="#278bff" id="colorPickerFree">
                    </li>
                </ul>
            </div>
            <div class="characteristics__option" id="widthFreeOptions" style="display: none">
                <span class="characteristics__option__title">Épaisseur du trait</span>
                <ul class="background-color">
                    <li class="characteristics__option__action characteristics__option__action--color">
                      <span id='freeWidthCounter'>0</span>
                      <input type="range" id="freeWidth" name="epaisseur" min="0" max="100">
                    </li>
                </ul>
            </div>
        </section>
        <section class="grid-canvas">
            <input type="checkbox" class="grid-canvas__input" id="grid-canvas">
            <label for="grid-canvas" class="grid-canvas__label">Afficher la grille</label>
        </section>
        <section class="tools">
            <div class="tools__item">
                <img src="../images/arrow-deselect.svg" id="deselect" alt="Désélectionner">
            </div>
            <div class="tools__item">
                <label for="file"><img src="../images/import.svg" alt="Settings"></label>
                <input type="file" class="tools__item__files" id="file" name="" value="" style="background:url('../images/import.svg')">
            </div>
            <!-- <div class="tools__item">
                <img src="../images/settings.svg" alt="Settings">
                <img src="../images/arrow.svg" alt="Sub" class="tools__item__sub-img">
                <ul class="tools__item__sub">
                    <li class="tools__item__sub__item">Contraste</li>
                    <li class="tools__item__sub__item">Luminosité</li>
                </ul>
            </div> -->
            <div class="tools__item">
                <img src="../images/filters.svg" alt="Filters">
                <img src="../images/arrow.svg" alt="Sub" class="tools__item__sub-img">
                <ul class="tools__item__sub">
                    <li class="tools__item__sub__item filter" data-filter="grayscale">Noir et blanc</li>
                    <li class="tools__item__sub__item filter" data-filter="sepia">Sépia</li>
                    <li class="tools__item__sub__item filter" data-filter="polaroid">Polaroïd</li>
                    <li class="tools__item__sub__item filter" data-filter="vintage">Vintage</li>
                    <li class="tools__item__sub__item filter" data-filter="technicolor">Technicolor</li>
                    <li class="tools__item__sub__item filter" data-filter="brownie">Brownie</li>
                    <li class="tools__item__sub__item filter" data-filter="kodachrome">Kodachrome</li>
                    <li class="tools__item__sub__item filter" data-filter="reset">Réinitialiser</li>
                </ul>
            </div>
            <div class="tools__item">
                <img src="../images/shapes.svg" alt="Shapes">
                <img src="../images/arrow.svg" alt="Sub" class="tools__item__sub-img">
                <ul class="tools__item__sub">
                    <button class="tools__item__sub__item" type="button" name="button" id="freeDraw">Dessin</button>
                    <button class="tools__item__sub__item shape" type="button" name="button" id="createCircle">Cercle</button>
                    <button class="tools__item__sub__item shape" type="button" name="button" id="createRect">Rectangle</button>
                    <button class="tools__item__sub__item shape" type="button" name="button" id="createTriangle">Triangle</button>
                </ul>
            </div>
            <div class="tools__item">
                <img src="../images/text.svg" id="text" alt="Text">
            </div>
            <!-- <div class="tools__item">
                <img src="../images/crop.svg" alt="Crop">
            </div> -->
            <div class="tools__item">
                <input type="color" name="" value="#278bff" id="colorPicker">
            </div>
        </section>

        <section class="chat">
            <div class="chat__header" id="chat-count"></div>
            <ul class="chat__messages" id="chat-container"></ul>
            <hr />
            <div class="chat__text">
                <input class="chat__text__input" id="chat-input" type="text" placeholder="Votre message...">
                <button class="chat__text__submit" id="chat-send"></button>
            </div>
        </section>



        <canvas id="canvasTest" width="<%= infos[0].width %>" height="<%= infos[0].height %>"></canvas>

        <!-- <input type="text" name="" value="" id="radiusValue"> -->

        <script src="../socket.io/socket.io.js" charset="utf-8"></script>
        <script src="../minjs/fabric.min.js" charset="utf-8"></script>
        <script type="text/javascript">
          window.onload = () => {

            var $ = function(id){return document.getElementById(id)};

            //Initialisation de socket.io
            const socket = io.connect();

            //Mise en place de la room avec l'ID du projet
            const room = "<%= infos[0].id %>";

            socket.on('connect', function() {
               socket.emit('room', {room: room, user: "<%= username %>"});
            });

            socket.on('newUser', function(data) {
                openNotif(popup[0]);

                setTimeout(() => {
                    closeNotif(popup[0]);
                },5000)

                popupText[0].innerHTML = data;
            });

            /*Popup*/
              const popup = document.getElementsByClassName('popup');
              const popupClose = document.getElementsByClassName('popup__close');
              const popupText = document.getElementsByClassName('popup__text');
              const popupLink = document.getElementById('popup-link');

              const openNotif = (element) => {
                  element.classList.add('open');
              }

              const closeNotif = (element) => {
                  element.classList.remove('open');
              }

              popupClose[0].addEventListener('click' , function() {
                  closeNotif(popup[0])
              });

              popupClose[1].addEventListener('click' , function() {
                  closeNotif(popup[1])
              });

              //Notification d'ajout dans un projet
              socket.on('getCollabNotif', data => {
                  if(data.receiver == "<%= user %>"){
                      openNotif(popup[1]);
                      setTimeout(() => {
                          closeNotif(popup[1]);
                      },5000)

                      popupText[1].innerHTML = data.sender+' t\'as invité dans un nouveau projet';
                      popupLink.href = "/app/"+data.project;
                  }
              });

            /*Chat*/
            const chatContainer = $('chat-container');
            const chatMsg = $('chat-input');
            const chatSend = $('chat-send');
            const chatCount = $('chat-count');

            chatSend.addEventListener('click', () => {
              socket.emit('chatMsg', {room: room, username: "<%= username %>", message: chatMsg.value});
              setTimeout(() => {
                chatMsg.value = "";
              }, 10);
            });

            chatMsg.addEventListener('keypress', (e) => {
              if(e.keyCode === 13){
                socket.emit('chatMsg', {room: room, username: "<%= username %>", message: chatMsg.value});
                setTimeout(() => {
                  chatMsg.value = "";
                }, 10);
              }
            });

            socket.on('newChatMsg', data => {
              chatContainer.innerHTML +=
              '<li class="chat__messages__li">'+
                '<span class="chat__messages__li__author">'+data.username+' : '+'</span>'+data.message+
              '</li>';
              chatContainer.scrollTop = chatContainer.scrollHeight - chatContainer.clientHeight;
            })


            chatMsg.addEventListener('keyup', () => {
                let isTyping = false;

                if(chatMsg.value.length > 0){
                  isTyping = true;
                  checkTyping(isTyping);
                }
                else{
                  isTyping = false;
                  checkTyping(isTyping);
                }

            });
            let flag = 0;
            function checkTyping(typing){
              if(typing && flag === 0){
                socket.emit('chatTyping', {room: room, username: "<%= username %>", isTyping: true});
                flag = 1;
              }
              else if(!typing){
                socket.emit('chatTyping', {room: room, username: "<%= username %>", isTyping: false});
                flag = 0;
              }
            }

            socket.on('typingStatus', data => {

              let statusDiv = document.createElement("li");
              statusDiv.setAttribute('class', 'chat__messages__li chat__status');

              let statusSpan = document.createElement("span");
              statusSpan.setAttribute('class', 'chat__messages__li__author');

              let spanContent = document.createTextNode(data.user+' : ');

              let statusImg = document.createElement("img");
              statusImg.setAttribute('class', 'chat__status__img');
              statusImg.setAttribute('src', '../images/typing.gif');

              statusDiv.appendChild(statusSpan);
              statusSpan.appendChild(spanContent);
              statusSpan.appendChild(statusImg);

              if(data.status){
                chatContainer.appendChild(statusDiv);
              }
              else if(!data.status){
                let div = document.getElementsByClassName('chat__status');
                chatContainer.removeChild(div[0]);
              }
            })

            socket.on('numberConnected', data => {
              if(data === 1){
                chatCount.innerHTML = 'Connecté ( '+data+' )';
              }
              else{
                chatCount.innerHTML = 'Connectés ( '+data+' )';
              }

            })

            //Invitation collab
            let collabButton = $('collabButton');
            let collabInput = $('collabInput');

            collabButton.addEventListener('click', () => {
              socket.emit('newCollab', {sender: "<%= username %>", receiver: collabInput.value, project: "<%= infos[0].id %>"})
            });

            //Notification d'ajout dans un projet
            socket.on('getCollabNotif', data => {
                if(data.receiver == "<%= user %>"){
                  console.log(data.sender+' t\'as invité dans le projet '+data.project)
                }
            });

            //Récupération des boutons de création de formes
            const shapeButton = document.getElementsByClassName('shape');
            const circleButton = $('createCircle');
            const createRect = $('createRect');
            const createTriangle = $('createTriangle');

            //Récupération des boutons de changements de couleur
            const colorPicker = $('colorPicker');
            const colorPickerSingle = $('colorPickerSingle');
            const colorPickerBorder = $('colorPickerBorder');
            const colorPickerNone = $('colorPickerNone');

            //Input épaisseur
            const borderWidth = $('borderWidth');

            //Options
            const backgroundOptions = $('backgroundOptions');
            const borderOptions = $('borderOptions');
            const widthOptions = $('widthOptions');

            //Récupération import d'image
            const importButton = $('file');

            //Deselection
            $('deselect').addEventListener('click', () => {

              if(canvas.isDrawingMode == false){

                $('caract').classList.add('active')
                $('caract-close').classList.add('active')

                backgroundOptions.style.display = 'none';
                borderOptions.style.display = 'none';
                widthOptions.style.display = 'none';
                fontOptions.style.display = 'none';

                bgFree.style.display = 'block';
                widthFree.style.display = 'block';
              }
              else{
                canvas.isDrawingMode = false;

                $('caract').classList.remove('active')
                $('caract-close').classList.remove('active')

                setTimeout(() => {
                  backgroundOptions.style.display = 'block';
                  borderOptions.style.display = 'block';
                  widthOptions.style.display = 'block';
                  fontOptions.style.display = 'block';

                  bgFree.style.display = 'none';
                  widthFree.style.display = 'none';
                },500)
              }

              $('caract').classList.remove('active')
              $('caract-close').classList.remove('active')

                canvas.discardActiveObject();
                canvas.renderAll();
            })

            //Export du canvas en png
            const exportButton = $('export');

            exportButton.addEventListener('click', saveImage)

            function saveImage(e) {
                this.href = canvas.toDataURL({
                    format: 'png',
                    quality: 0.8
                });
                this.download = 'canvas.png'
            }

            colorPicker.addEventListener('change', (e) => {
              changeColor(e.target.value);
            });

            colorPickerSingle.addEventListener('change', (e) => {
              socket.emit('newColor', {room: room, id: lastObjectSelected.id, color: e.target.value});
            })

            colorPickerNone.addEventListener('click', (e) => {
              socket.emit('newNoneColor', {room: room, id: lastObjectSelected.id, color: 'rgba(0,0,0,0)'});
            })

            colorPickerBorder.addEventListener('change', (e) => {
              socket.emit('newBorderColor', {room: room, id: lastObjectSelected.id, color: e.target.value});
            })

            borderWidth.addEventListener('input', (e) => {
              $('widthCounter').innerHTML = e.target.value
              socket.emit('newBorderWidth', {room: room, id: lastObjectSelected.id, width: e.target.value});
            })

            socket.on('getNewColor', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })

              result.set('fill', data.color)

              canvas.renderAll();
              sendData();
            })

            socket.on('getNewNoneColor', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })

              result.set('fill', data.color)

              canvas.renderAll();
              sendData();
            })

            socket.on('getNewBorderColor', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })

              result.set('stroke', data.color)

              canvas.renderAll();
              sendData();
            })

            socket.on('getNewBorderWidth', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })

              result.strokeWidth = parseInt(data.width)

              canvas.renderAll();
              sendData();
            })

            let color = 'black';

            function changeColor(colored){
              return color = colored;
            }

            //Création du Canvas
            const canvas = new fabric.Canvas('canvasTest', {
              isDrawingMode: false
            });

            let jsonDb = "<%= infos[0].render %>";
            let json = jsonDb.replace(/&#34;/g, '"');

            canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));

            canvas.selection = false;

            //Envoi du JSON vers Server
            function sendData(){
              let id = "<%= infos[0].id %>";
              let serializedCanvas = JSON.stringify(canvas.toJSON(['id', 'lockMovementX', 'lockMovementY', 'lockScalingX', 'lockScalingY', 'lockRotation']));
              console.log('Saved');
              let image = canvas.toDataURL('jpeg');
              socket.emit('connectionCanvas', {canvas: serializedCanvas, id: id, image: image});
            }

            //Enregistrement toutes les 10 secs
            setInterval(() => {
              sendData();
            },10000)

            //Création de texte
            const textButton = $('text');

            //Filtres images
            const allFilters = document.getElementsByClassName('filter');
            for(let i = 0; i < allFilters.length; i++){
              allFilters[i].addEventListener('click', (e) => {
                socket.emit('newFilter', {room: room, id: lastObjectSelected.id, filter: e.target.getAttribute('data-filter')})
              })
            }

            const filtersObject = {
              'grayscale': new fabric.Image.filters.Grayscale(),
              'sepia': new fabric.Image.filters.Sepia(),
              'polaroid': new fabric.Image.filters.Polaroid(),
              'vintage': new fabric.Image.filters.Vintage(),
              'technicolor': new fabric.Image.filters.Technicolor(),
              'brownie': new fabric.Image.filters.Brownie(),
              'kodachrome': new fabric.Image.filters.Kodachrome()
            }

            socket.on('getNewFilter', data => {

              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              });

              if(data.filter == 'reset'){
                result.filters = [];
                result.applyFilters();
                canvas.renderAll();
                sendData();
              }
              else{
                let fil = filtersObject[data.filter];
                if(result.filters.length > 0 ){
                  result.filters = []
                }

                result.filters.push(fil);
                result.applyFilters();
                canvas.renderAll();
                sendData();
              }



            })

            //Changement de positions (arrière-plan, premier-plan, ect...)
            const buttonToBack = $('posAp');
            const buttonBackward = $('posAr');
            const buttonToFront = $('posPp');
            const buttonFront = $('posAv');

            buttonToBack.addEventListener('click', () => {
              socket.emit('layer', {room: room, object: lastObjectSelected.id, type: 'toBack'})
            });

            buttonBackward.addEventListener('click', () => {
              socket.emit('layer', {room: room, object: lastObjectSelected.id, type: 'back'})
            });

            buttonToFront.addEventListener('click', () => {
              socket.emit('layer', {room: room, object: lastObjectSelected.id, type: 'toFront'})
            });

            buttonFront.addEventListener('click', () => {
              socket.emit('layer', {room: room, object: lastObjectSelected.id, type: 'front'})
            });

            socket.on('getLayer', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.object
              })

              if(data.type == 'toBack'){
                canvas.sendToBack(result);
                canvas.discardActiveObject();
                canvas.renderAll()
                sendData()
              }
              else if(data.type == 'toFront'){
                canvas.bringToFront(result);
                canvas.discardActiveObject();
                canvas.renderAll()
                sendData()
              }
              else if(data.type == 'back'){
                canvas.sendBackwards(result);
                canvas.discardActiveObject();
                canvas.renderAll()
                sendData()
              }
              else if(data.type == 'front'){
                canvas.bringForward(result);
                canvas.discardActiveObject();
                canvas.renderAll()
                sendData()
              }
            })

            //FreeDraw | Temps réel : http://jsfiddle.net/B5Ub9/4/
            const freeDraw = $('freeDraw');
            const freeColor = $('colorPickerFree');
            const freeWidth = $('freeWidth');
            const bgFree = $('backgroundFreeOptions');
            const widthFree = $('widthFreeOptions');

            freeColor.addEventListener('change', (e) => {
              canvas.freeDrawingBrush.color = e.target.value;
            })

            freeWidth.addEventListener('change', (e) => {
              $('freeWidthCounter').innerHTML = e.target.value
              canvas.freeDrawingBrush.width = parseInt(e.target.value);
            })

            freeWidth.addEventListener('input', (e) => {
              $('freeWidthCounter').innerHTML = e.target.value
            })

            freeDraw.addEventListener('click', (e) => {
              if(canvas.isDrawingMode == false){
                canvas.isDrawingMode = true;

                $('caract').classList.add('active')
                $('caract-close').classList.add('active')

                backgroundOptions.style.display = 'none';
                borderOptions.style.display = 'none';
                widthOptions.style.display = 'none';
                fontOptions.style.display = 'none';

                bgFree.style.display = 'block';
                widthFree.style.display = 'block';
              }
              else{
                canvas.isDrawingMode = false;

                $('caract').classList.remove('active')
                $('caract-close').classList.remove('active')

                setTimeout(() => {
                  backgroundOptions.style.display = 'block';
                  borderOptions.style.display = 'block';
                  widthOptions.style.display = 'block';
                  fontOptions.style.display = 'block';

                  bgFree.style.display = 'none';
                  widthFree.style.display = 'none';
                },500)

              }
            });

            canvas.on('path:created', (opt) => {
              path = opt.path.path;
              socket.emit('objectAdded', {room: room, type: 'path', path: path, color: color, pathWidth: opt.path.strokeWidth, pathColor: opt.path.stroke})
              canvas.remove(opt.path)
              sendData();
            });

            canvas.on('object:added', sendData);

            canvas.on('object:selected', onObjectSelected);

            let lastObjectSelected = 0;

            function onObjectSelected(e){
            	let self = e.target;
              let fontOptions = $('fontOptions');

              if(self.type != 'image'){
                  backgroundOptions.style.display = 'block';
                  borderOptions.style.display = 'block';
                  widthOptions.style.display = 'block';
              }
              else{
                  backgroundOptions.style.display = 'none';
                  borderOptions.style.display = 'none';
                  widthOptions.style.display = 'none';
              }

              if(self.type == "path"){
                bgFree.style.display = 'none';
                widthFree.style.display = 'none';
                backgroundOptions.style.display = 'none';
                borderOptions.style.display = 'none';
                widthOptions.style.display = 'none';
                fontOptions.style.display = 'none';
              }

              if(self.text != null){
                fontOptions.style.display = 'block';
              }
              else{
                fontOptions.style.display = 'none';
              }

              colorPickerSingle.value = self.fill
              colorPickerBorder.value = self.stroke

              $('widthCounter').innerHTML = self.strokeWidth

              borderWidth.value = self.strokeWidth

              lastObjectSelected = self;

              console.log(self);

              $('caract').classList.add('active')
              $('caract-close').classList.add('active')
            }

            canvas.on('mouse:down', (e) => {
              if(e.target == null){
                $('caract').classList.remove('active')
                $('caract-close').classList.remove('active')
              }
            })

            canvas.on('object:scaling', onObjectScaled);

            function onObjectScaled(e){
            	let self = e.target;
              socket.emit('newScale', {room: room, scaleX: self.get('scaleX'), scaleY: self.get('scaleY'), id: self.id})
            }

            canvas.on('object:rotating', onObjectRotating);

            function onObjectRotating(e){
            	let self = e.target;
              socket.emit('newRotation', {room: room, angle: self.get('angle'), id: self.id})
            }

            socket.on('getNewRotation', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })

              result.angle = data.angle;

              canvas.renderAll();
              sendData();
            });

            canvas.on('object:moving', objectMoving);

            function objectMoving(e){
              let self = e.target;
              socket.emit('newCoords', {room: room, top: self.top, left: self.left, id: self.id});
            }

            function drawObject(data){
              if(data.type == 'circle'){

                const circle = new fabric.Circle({
                  radius: 100,
                  fill: data.color,
                  left: canvas.width/2,
                  top: canvas.height/2,
                  selectable: true
                });

                circle.toObject = (function(toObject) {
                return function() {
                  return fabric.util.object.extend(toObject.call(this), {
                      id: this.id
                    });
                  };
                })(circle.toObject);


                const rect = new fabric.Rect({
                    width: 10,
                    height: 20,
                    fill: data.color,
                    opacity: 0.7,
                    top: canvas.height/2,
                    left: canvas.width/2,
                 });



                circle.id = data.id;

                canvas.add(circle);
            }
            else if(data.type == 'rect'){

                const rect = new fabric.Rect({
                    width: 100,
                    height: 200,
                    fill: data.color,
                    top: canvas.height/2,
                    left: canvas.width/2,
                 });

                rect.toObject = (function(toObject) {
                return function() {
                  return fabric.util.object.extend(toObject.call(this), {
                      id: this.id
                    });
                  };
                })(rect.toObject);

                rect.id = data.id;

                canvas.add(rect);
              }
              else if(data.type == 'triangle'){

                  const triangle = new fabric.Triangle({
                      width: 100,
                      height: 200,
                      fill: data.color,
                      top: canvas.height/2,
                      left: canvas.width/2,
                   });

                  triangle.toObject = (function(toObject) {
                  return function() {
                    return fabric.util.object.extend(toObject.call(this), {
                        id: this.id
                      });
                    };
                  })(triangle.toObject);

                  triangle.id = data.id;

                  canvas.add(triangle);
                }
                else if(data.type == 'image'){
                  if (data.file === 'image/jpeg') {
                     fabric.Image.fromURL(data.url, function(img) {
                        img.set({

                        });

                        img.id = data.id;

                        canvas.add(img);
                     });
                  } else if (data.file === 'image/png') {
                    fabric.Image.fromURL(data.url, function(img) {
                       img.set({

                       });

                       img.id = data.id;

                       canvas.add(img);
                    });
                  }

                  fabric.Image.prototype.toObject = (function(toObject) {
                    return function() {
                      return fabric.util.object.extend(toObject.call(this), {
                        id: this.id,
                        src: this.toDataURL()
                      });
                    };
                  })(fabric.Image.prototype.toObject);
                }
                else if(data.type == 'text'){

                  const text = new fabric.IText('Appuyez et écrivez', {
                      left: canvas.width/2.5,
                      top: canvas.height/2,
                      fontFamily: 'Montserrat',
                      fill: data.color,
                      fontSize: 50,
                    });

                    text.id = data.id;

                    canvas.add(text);
                }
                else if(data.type == 'path'){

                  const path = new fabric.Path(data.path,{
                      stroke: data.pathColor,
                      strokeWidth: data.pathWidth,
                      fill: 'rgba(0,0,0,0)'
                    });

                    path.id = data.id;

                    canvas.add(path);
                }
            }

            canvas.on('text:changed', function(e) {
              socket.emit('newText', {room: room, id: e.target.id, text: e.target.text})
            });

            socket.on('getNewText', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })

              result.text = data.text;
              canvas.renderAll();
              sendData();
            })

            //Changement de Police
            const fontControl = $('fonts');

            fontControl.addEventListener('change', (e) => {
              socket.emit('newFont', {room: room, id: lastObjectSelected.id, font: e.target.value})
            })

            socket.on('getNewFont', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })

              result.fontFamily = data.font;
              canvas.renderAll();
              sendData();
            })

            document.addEventListener('keydown', e => {
              if(e.keyCode == '46'){
                socket.emit('deleted', {room: room, id: lastObjectSelected.id});
              }
            }, false);

            socket.on('getDeleted', data => {
              let result = canvas.getObjects().find(obj => {
                return obj.id === data.id
              })
              canvas.remove(result);
              sendData();
            })

            socket.on('getNewObject', data => {
              drawObject(data);
            });

            circleButton.addEventListener('click', () => {
              socket.emit('objectAdded', {type: 'circle', color: color, room: room});
            });

            createRect.addEventListener('click', () => {
              socket.emit('objectAdded', {type: 'rect', color: color, room: room});
            });

            createTriangle.addEventListener('click', () => {
              socket.emit('objectAdded', {type: 'triangle', color: color, room: room});
            });

            text.addEventListener('click', () => {
              socket.emit('objectAdded', {type: 'text', color: color, room: room});

              //socket.emit('newText', {room: room})
            })

            importButton.addEventListener('change', (e) => {
              let fileType = e.target.files[0].type;
              var reader = new FileReader();
              reader.readAsDataURL(e.target.files[0]);
              reader.onloadend = function() {
                  base64data = reader.result;
                  socket.emit('objectAdded', {type: 'image', file: fileType, url: base64data, room: room})
              }
            })

          socket.on('getNewCoords', data => {
            let result = canvas.getObjects().find(obj => {
              return obj.id === data.id
            })

            //console.log(allObjects);
            result.top = data.top;
            result.left = data.left;

            canvas.renderAll();

          });

          socket.on('getNewScale', data => {
            let result = canvas.getObjects().find(obj => {
              return obj.id === data.id
            })

            result.scaleX = data.scaleX;
            result.scaleY = data.scaleY;

            canvas.renderAll();

          });

            //On récupère le canvas à la ocnnection
            // socket.on('getConnectionCanvas', data => {
            //   console.log('New Data = '+data)
            //   canvas.loadFromJSON(data);
            // })

          }
        </script>
        <script src="../minjs/script.js"></script>
    </body>
</html>
